const UsersSchema = require("../Schema/Users");

async function MakeAdmin(chatID, name) {
  try {
    const existingUser = await UsersSchema.findOne({ chatID });

    if (existingUser) {
      return { success: true, message: "‚úÖ –í—ã —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä." };
    }

    const newAdmin = new UsersSchema({ chatID, name });
    await newAdmin.save();

    return { success: true, message: "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!" };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", error);
    return {
      success: false,
      message: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
    };
  }
}

async function AllAdmins() {
  try {
    const allAdmins = await UsersSchema.find({}, { chatID: 1, _id: 0 });
    const ids = allAdmins.map((user) => user.chatID);
    return { success: true, ids };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:", error);
    return {
      success: false,
      message: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.",
    };
  }
}
module.exports = { MakeAdmin, AllAdmins };
