const { Telegraf } = require("telegraf");
const { MakeAdmin, AllAdmins } = require("../database/Request/Users");
const bot = new Telegraf(process.env.TELEGRAM_TOKEN);

bot.on("text", async (ctx) => {
  const inputText = ctx.message.text;
  const secret = process.env.SECRET_TEXT;

  if (inputText !== secret) {
    return ctx.reply("üîí –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.");
  }

  try {
    const { id, first_name } = ctx.from;
    const newAdmin = await MakeAdmin(id, first_name);
    return ctx.reply(`${newAdmin.message}`);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", error);
    return ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.");
  }
});
function formatContactLink(connect) {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  if (emailRegex.test(connect)) {
    return `mailto:${connect}`;
  }
  return connect;
}
function escapeHtml(text) {
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
}

async function sendNewApplication(description, price, file, connect) {
  try {
    let htmlMessage = `üî• <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b> üî•
üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> 
<pre><code>${escapeHtml(description)}</code></pre>   
üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${price}p
üìé <b>–¢–ó:</b> <a href="${process.env.HOST}/api/v1/file?title=${file}">${process.env.HOST}/api/v1/file?title=${file}</a>  
üì¨ <b>–°–≤—è–∑—å:</b> <a href="${formatContactLink(connect)}">${connect}</a>
`;
    const result = await AllAdmins();
    if (!result.success) {
      return { success: false, message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤." };
    }

    const ids = result.ids;
    for (const chatID of ids) {
      await bot.telegram.sendMessage(chatID, htmlMessage, {
        parse_mode: "HTML",
      });
    }

    return { success: true, message: "–£—Å–ø–µ—Ö!" };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:", error);
    return { success: false, message: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ." };
  }
}

module.exports = { bot, sendNewApplication };
